{"version":3,"sources":["App.js","components/Photos.jsx","components/Docs.jsx","components/Audios.jsx","components/Videos.jsx","components/Upload.js","components/Homepage.tsx","components/Profile.jsx","images/metamask.png","Login.tsx","images/earth.png","components/Navbar.jsx","features/userSlice.js","app/store.js","serviceWorker.js","index.js","components/Card.jsx"],"names":["global","WebSocket","require","App","user","useSelector","selectUser","console","table","className","exact","path","Photos","useState","files","setFiles","identity","PrivateKey","fromString","keyinfo","key","process","secret","getFiles","a","Client","withKeyInfo","client","getToken","query","Where","eq","listThreads","threads","datathreadId","ThreadID","id","toString","find","recievedFiles","map","file","desc","description","date","ftype","name","_id","useEffect","filehash","filename","substr","Docs","Audios","controls","preload","src","type","href","Videos","ipfsClient","CreateIPFSClient","host","port","protocol","Upload","ext","setExt","setProcess","setName","setDesc","setDate","added_file_hash","setFileHash","history","useHistory","env","REACT_APP_KEY","REACT_APP_SECRET","dataschema","title","required","properties","push","schema","token","log","length","threadId","fromRandom","newDB","newCollection","create","saveToIpfs","add","added","cid","error","pushFiles","onSubmit","event","preventDefault","style","backgroundImage","accept","onChange","stopPropagation","target","extension","String","split","pop","toLowerCase","onClick","e","document","getElementById","click","value","placeholder","Homepage","Profile","useDispatch","EthereumAddress","_type","Login","dispatch","getSigner","window","ethereum","Error","debug","provider","providers","Web3Provider","signer","getAddressAndSigner","request","method","accounts","address","generatePrivateKey","metamask","ethereum_address","application_name","message","signMessage","signedText","hash","utils","keccak256","array","replace","match","hexNoPrefix","BigNumber","from","toNumber","fromRawEd25519Seed","Uint8Array","login","fox","alt","Button","Navbar","activeClassName","to","earth","width","logout","Avatar","photoUrl","sizes","userSlice","createSlice","initialState","reducers","state","action","payload","actions","configureStore","reducer","userReducer","Boolean","location","hostname","ReactDOM","render","StrictMode","store","navigator","serviceWorker","ready","then","registration","unregister","Card","height"],"mappings":"iGAAA,oJAcCA,EAAQC,UAAYC,EAAQ,KA8CdC,IA5Cf,WAEE,IAAMC,EAAOC,YAAYC,KAIzB,OAFAC,QAAQC,MAAMJ,GAGZ,qBAAKK,UAAU,MAAf,SACE,cAAC,IAAD,UACIL,EAEA,qCACE,cAAC,IAAD,IACA,eAAC,IAAD,WACE,cAAC,IAAD,CAAOM,OAAK,EAACC,KAAK,UAAlB,SACE,cAAC,IAAD,MAEF,cAAC,IAAD,CAAOD,OAAK,EAACC,KAAK,QAAlB,SACE,cAAC,IAAD,MAEF,cAAC,IAAD,CAAOD,OAAK,EAACC,KAAK,UAAlB,SACE,cAAC,IAAD,MAEF,cAAC,IAAD,CAAOD,OAAK,EAACC,KAAK,UAAlB,SACE,cAAC,IAAD,MAEF,cAAE,IAAF,CAAQD,OAAK,EAACC,KAAK,UAAnB,SACE,cAAC,IAAD,MAEF,cAAC,IAAD,CAAOD,OAAK,EAACC,KAAK,WAAlB,SACE,cAAC,IAAD,MAEF,cAAC,IAAD,CAAOA,KAAK,IAAZ,SACE,cAAC,IAAD,YAvBN,cAAC,IAAD,W,8JC4BKC,IA7Cf,WACI,IAAMR,EAAOC,YAAYC,KADX,EAEYO,qBAFZ,mBAEPC,EAFO,KAEAC,EAFA,KAGRC,EAAWC,IAAWC,WAAWd,EAAKY,UAEtCG,EAAU,CACZC,IAAKC,8BACLC,OAAQD,4CAKNE,EAAQ,uCAAG,WAAOH,EAAKJ,GAAZ,uBAAAQ,EAAA,sEACQC,IAAOC,YAAYN,GAD3B,cACPO,EADO,gBAECA,EAAOC,SAASZ,GAFjB,qBAGPa,EAAQ,IAAIC,IAAM,SAASC,GAAG,SAHvB,SAISJ,EAAOK,cAJhB,cAIPC,EAJO,OAKPC,EAAeC,IAASjB,WAAWe,EAAQ,GAAGG,GAAGC,YAL1C,UAMeV,EAAOW,KAAKJ,EAAc,OAAQL,GANjD,QAMPU,EANO,OAQbxB,EAASwB,EAAcC,KAAI,SAAAC,GAAI,MAAK,CAAEA,KAAMA,EAAKA,KAAMC,KAAMD,EAAKE,YAAaC,KAAMH,EAAKG,KAAMC,MAAOJ,EAAKI,MAAOC,KAAML,EAAKK,KAAMV,GAAIK,EAAKM,SARhI,4CAAH,wDAed,OAJAC,qBAAU,WACNzB,EAASJ,EAASH,KACnB,CAACG,IAGA,qBAAKV,UAAU,OAAf,SACI,qBAAKA,UAAU,QAAf,gBAEKK,QAFL,IAEKA,OAFL,EAEKA,EAAO0B,KAAI,SAAAC,GAAI,OAAI,cAAC,IAAD,CAChBQ,SAAUR,EAAKA,KACfS,SAAUT,EAAKK,KAAKK,OAAO,EAAG,IAAM,MACpCP,KAAMH,EAAKG,KACXF,KAAMD,EAAKC,KAAKS,OAAO,EAAG,IAAM,MAChCf,GAAIK,EAAKL,GAETS,MAAOJ,EAAKI,OADPJ,EAAKL,a,4ICSfgB,IA9Cf,WAEI,IAAMhD,EAAOC,YAAYC,KAFb,EAGcO,qBAHd,mBAGLC,EAHK,KAGEC,EAHF,KAINC,EAAWC,IAAWC,WAAWd,EAAKY,UAEtCG,EAAU,CACZC,IAAKC,8BACLC,OAAQD,4CAKNE,EAAQ,uCAAG,WAAOH,EAAKJ,GAAZ,uBAAAQ,EAAA,sEACQC,IAAOC,YAAYN,GAD3B,cACPO,EADO,gBAECA,EAAOC,SAASZ,GAFjB,qBAGPa,EAAQ,IAAIC,IAAM,SAASC,GAAG,YAHvB,SAISJ,EAAOK,cAJhB,cAIPC,EAJO,OAKPC,EAAeC,IAASjB,WAAWe,EAAQ,GAAGG,GAAGC,YAL1C,UAMeV,EAAOW,KAAKJ,EAAc,OAAQL,GANjD,QAMPU,EANO,OAQbxB,EAASwB,EAAcC,KAAI,SAAAC,GAAI,MAAK,CAAEA,KAAMA,EAAKA,KAAMC,KAAMD,EAAKE,YAAaC,KAAMH,EAAKG,KAAMC,MAAOJ,EAAKI,MAAOC,KAAML,EAAKK,KAAMV,GAAIK,EAAKM,SARhI,4CAAH,wDAed,OAJAC,qBAAU,WACNzB,EAASJ,EAASH,KACnB,CAACG,IAGA,qBAAKV,UAAU,OAAf,SACI,qBAAKA,UAAU,QAAf,gBAEKK,QAFL,IAEKA,OAFL,EAEKA,EAAO0B,KAAI,SAAAC,GAAI,OAAI,cAAC,IAAD,CAChBQ,SAAUR,EAAKA,KACfS,SAAUT,EAAKK,KAAKK,OAAO,EAAG,IAAM,MACpCP,KAAMH,EAAKG,KACXF,KAAMD,EAAKC,KAAKS,OAAO,EAAG,IAAM,MAChCf,GAAIK,EAAKL,GAETS,MAAOJ,EAAKI,OADPJ,EAAKL,a,oICMfiB,IA7Cf,WAEI,IAAMjD,EAAOC,YAAYC,KAFX,EAIYO,mBAAS,IAJrB,mBAIPC,EAJO,KAIAC,EAJA,KAMRC,EAAWC,IAAWC,WAAWd,EAAKY,UAEtCG,EAAU,CACZC,IAAKC,8BACLC,OAAQD,4CAKNE,EAAQ,uCAAG,WAAOH,EAAKJ,GAAZ,uBAAAQ,EAAA,sEACQC,IAAOC,YAAYN,GAD3B,cACPO,EADO,gBAECA,EAAOC,SAASZ,GAFjB,qBAGPa,EAAQ,IAAIC,IAAM,SAASC,GAAG,SAHvB,SAISJ,EAAOK,cAJhB,cAIPC,EAJO,OAKPC,EAAeC,IAASjB,WAAWe,EAAQ,GAAGG,GAAGC,YAL1C,UAMeV,EAAOW,KAAKJ,EAAc,OAAQL,GANjD,QAMPU,EANO,OAQbxB,EAASwB,EAAcC,KAAI,SAAAC,GAAI,MAAK,CAAEA,KAAMA,EAAKA,KAAMC,KAAMD,EAAKE,YAAaC,KAAMH,EAAKG,KAAMC,MAAOJ,EAAKI,MAAOC,KAAML,EAAKK,KAAMV,GAAIK,EAAKM,SARhI,4CAAH,wDAgBd,OAJAC,qBAAU,WACNzB,EAASJ,EAASH,KACnB,CAACG,IAGA,qBAAKV,UAAU,SAAf,SACKK,EAAM0B,KAAI,SAAAC,GAAI,OAAI,sBAAKL,GAAIK,EAAKL,GAAI3B,UAAU,YAA5B,UACf,uBAAO6C,UAAQ,EAACC,QAAQ,OAAxB,SAAgC,wBAAQC,IAAG,sCAAiCf,EAAKA,MAAQgB,KAAK,OAAa,sBAAKhD,UAAU,cAAf,UACvG,sBAAKA,UAAU,cAAf,UAA6B,6BAAKgC,EAAKK,KAAKK,OAAO,EAAG,MAAS,+BAAOV,EAAKG,UAE3E,sBAAKnC,UAAU,gBAAf,UACI,4BAAIgC,EAAKC,KAAKS,OAAO,EAAG,IAAM,QADlC,IAC6C,mBAAGO,KAAI,sCAAiCjB,EAAKA,MAA7C,kC,4ICQlDkB,IA7Cf,WACI,IAAMvD,EAAOC,YAAYC,KADX,EAEYO,qBAFZ,mBAEPC,EAFO,KAEAC,EAFA,KAGRC,EAAWC,IAAWC,WAAWd,EAAKY,UAEtCG,EAAU,CACZC,IAAKC,8BACLC,OAAQD,4CAKNE,EAAQ,uCAAG,WAAOH,EAAKJ,GAAZ,uBAAAQ,EAAA,sEACQC,IAAOC,YAAYN,GAD3B,cACPO,EADO,gBAECA,EAAOC,SAASZ,GAFjB,qBAGPa,EAAQ,IAAIC,IAAM,SAASC,GAAG,SAHvB,SAISJ,EAAOK,cAJhB,cAIPC,EAJO,OAKPC,EAAeC,IAASjB,WAAWe,EAAQ,GAAGG,GAAGC,YAL1C,UAMeV,EAAOW,KAAKJ,EAAc,OAAQL,GANjD,QAMPU,EANO,OAQbxB,EAASwB,EAAcC,KAAI,SAAAC,GAAI,MAAK,CAAEA,KAAMA,EAAKA,KAAMC,KAAMD,EAAKE,YAAaC,KAAMH,EAAKG,KAAMC,MAAOJ,EAAKI,MAAOC,KAAML,EAAKK,KAAMV,GAAIK,EAAKM,SARhI,4CAAH,wDAed,OAJAC,qBAAU,WACNzB,EAASJ,EAASH,KACnB,CAACG,IAGA,qBAAKV,UAAU,SAAf,SACI,qBAAKA,UAAU,QAAf,gBAEKK,QAFL,IAEKA,OAFL,EAEKA,EAAO0B,KAAI,SAAAC,GAAI,OAAI,cAAC,IAAD,CAChBQ,SAAUR,EAAKA,KACfS,SAAUT,EAAKK,KAAKK,OAAO,EAAG,IAAM,MACpCP,KAAMH,EAAKG,KACXF,KAAMD,EAAKC,KAAKS,OAAO,EAAG,IAAM,MAChCf,GAAIK,EAAKL,GAETS,MAAOJ,EAAKI,OADPJ,EAAKL,a,uJCjCxBwB,GALQ1D,EAAQ,GACGA,EAAQ,IAId2D,CAAiB,CAAEC,KAAM,iBAAkBC,KAAM,KAAMC,SAAU,WAsMrEC,IAnMf,WAAmB,IAAD,EAEQpD,mBAAS,IAFjB,mBAEPqD,EAFO,KAEFC,EAFE,OAGgBtD,mBAAS,IAHzB,mBAGPQ,EAHO,KAGE+C,EAHF,OAIYvD,mBAAS,IAJrB,gCAKUA,mBAAS,KALnB,mBAKPiC,EALO,KAKDuB,EALC,OAMUxD,mBAAS,IANnB,mBAMP6B,EANO,KAMD4B,EANC,OAOUzD,mBAAS,IAPnB,mBAOP+B,EAPO,KAOD2B,EAPC,KAQV1B,EAAQ,KARE,EAUyBhC,mBAAS,MAVlC,mBAUP2D,EAVO,KAUUC,EAVV,KAYRrE,EAAOC,YAAYC,KAEnBU,EAAWC,IAAWC,WAAWd,EAAKY,UAEtC0D,EAAUC,cAEVxD,EAAU,CACZC,IAAKC,EAAQuD,IAAIC,cACjBvD,OAAQD,EAAQuD,IAAIE,kBAGlBC,EAAa,CACfC,MAAO,aACPvB,KAAM,SACNwB,SAAU,CAAC,OACXC,WAAY,CACRnC,IAAK,CACDU,KAAM,SACNd,YAAa,sBAEjBvC,KAAM,CACFqD,KAAM,SACNd,YAAa,uBAEjBF,KAAM,CACFE,YAAa,2BACbc,KAAM,UAEVZ,MAAO,CACHF,YAAa,kCACbc,KAAM,UAEVX,KAAM,CACFH,YAAa,gCACbc,KAAM,UAEVd,YAAa,CACTA,YAAa,8BACbc,KAAM,UAEVb,KAAM,CACFD,YAAa,uBACbc,KAAM,YAtDJ,SA2DC0B,EA3DD,kFA2Dd,WAAoBC,EAAQhE,EAAKJ,GAAjC,yBAAAQ,EAAA,sEACyBC,IAAOC,YAAYN,GAD5C,cACUO,EADV,gBAEwBA,EAAOC,SAASZ,GAFxC,cAEUqE,EAFV,OAGI9E,QAAQ+E,IAAI3D,GACZpB,QAAQ+E,IAAID,GAEN5C,EAAO,CACTrC,KAAMA,EAAKY,SACXyB,KAAM+B,EACN3B,MAAOA,EACPC,KAAMA,EACNH,YAAaD,EACbE,KAAMA,EACNR,GAAI,IAbZ,UAgBwBT,EAAOK,cAhB/B,WAiB2B,KADnBC,EAhBR,QAiBgBsD,OAjBhB,wBAqBcC,EAAWrD,IAASsD,aAC1BlF,QAAQ+E,IAAI,eAAgBE,EAAU,WAAaA,GAKnDjF,QAAQ+E,IAAI3D,GA3BpB,UA6BcA,EAAO+D,MAAMF,EAAU,QA7BrC,eA8BQjF,QAAQ+E,IAAI,sBA9BpB,UAmCc3D,EAAOgE,cAAcH,EAAU,CAAE1C,KAAM,OAAQsC,OAAQA,IAnCrE,yBAuCoBzD,EAAOK,cAvC3B,eAuCIC,EAvCJ,OA0CI1B,QAAQ+E,IAAI,YAAarD,GACzB1B,QAAQ+E,IAAIrD,EAAQ,GAAGG,IACjBF,EAAeC,IAASjB,WAAWe,EAAQ,GAAGG,GAAGC,YACvD9B,QAAQ+E,IAAI,YAAarD,GA7C7B,UAgDUN,EAAOiE,OAAO1D,EAAc,OAAQ,CAACO,IAhD/C,QAiDIlC,QAAQ+E,IAAI,2BAjDhB,6CA3Dc,sBAgHd,IASMO,EAAU,uCAAG,iCAAArE,EAAA,gFAAiBiB,EAAjB,uBAESmB,EAAWkC,IAAIrD,GAFxB,OAELsD,EAFK,OAGXtB,EAAYsB,EAAMC,IAAI3D,YAHX,gDAKX9B,QAAQ0F,MAAR,MALW,QAOf7B,EAAW,IAPI,yDAAH,sDAcV8B,EAAS,uCAAG,sBAAA1E,EAAA,sEAER2D,EAAKJ,EAAY5D,EAASH,GAFlB,2CAAH,qDA2Bf,GAAI4C,EACA,OACI,qBAAKnD,UAAU,SAAf,SACI,qBAAKA,UAAU,eAAf,SACI,uBAAM2B,GAAG,gBAAgB+D,SA1BpB,SAAUC,GAC3BA,EAAMC,iBACN9F,QAAQ+E,IAAIpB,GACA,QAARA,GAAyB,QAARA,GAAyB,SAARA,GAA0B,QAARA,EAAerB,EAAQ,QAC9D,QAARqB,GAAyB,QAARA,GAAyB,QAARA,EAAerB,EAAQ,QACjD,QAARqB,GAAyB,QAARA,GAAyB,SAARA,EAAgBrB,EAAQ,WAClD,QAARqB,GAAyB,QAARA,IAAerB,EAAQ,SAE7C2B,GAAmB1B,GAAQJ,GAAQE,IAGnCrC,QAAQ+E,IAAId,GAEZ0B,IAEAxB,EAAQS,KAAK,OAW4C1E,UAAU,UAA3D,UACI,sBAAKA,UAAU,mBAAmB6F,MAAO,CAAEC,gBAAiB/B,EAAe,0CAAsCA,EAAtC,KAA2D,QAAtI,UAEI,uBAAO/D,UAAU,QAAQgD,KAAK,OAAO+C,OAAO,gCAAgC1D,KAAK,aAAaV,GAAG,aAAaqE,SAzDlH,SAAUL,GAC1BhC,EAAW,iCACXgC,EAAMM,kBACNN,EAAMC,iBACNR,EAAWO,EAAMO,OAAO7F,OACxB,IAAM8F,EAAYC,OAAOT,EAAMO,OAAO7F,MAAM,GAAGgC,KAAKgE,MAAM,KAAKC,OAAOC,cACtE7C,EAAOyC,IAmDkJ3B,UAAQ,IAC7I,eAAC,IAAD,CAAY7C,GAAG,cAAc6E,QAAS,SAACC,GAAD,OAAOC,SAASC,eAAe,cAAcC,SAAnF,cACG,cAAC,IAAD,OACH,+BAAK7C,EAAkB,8BAAgCnD,EAAvD,UAEJ,sBAAMZ,UAAU,oBAAhB,UAEI,uBAAOA,UAAU,QAAQ6G,MAAOxE,EAAMyE,YAAY,oBAAoBd,SAAU,SAACS,GAAD,OAAO7C,EAAQ6C,EAAEP,OAAOW,QAAQ7D,KAAK,OAAOX,KAAK,OAAOV,GAAG,YAAY6C,UAAQ,IAC/J,uBAAOxE,UAAU,QAAQ6G,MAAO5E,EAAM6E,YAAY,6BAA6Bd,SAAU,SAACS,GAAD,OAAO5C,EAAQ4C,EAAEP,OAAOW,QAAQ7D,KAAK,OAAOX,KAAK,OAAOV,GAAG,cAAc6C,UAAQ,IAC1K,uBACIxE,UAAU,WACVgD,KAAK,OACLgD,SAAU,SAACS,GAAD,OAAO3C,EAAQ2C,EAAEP,OAAOW,QAClCrC,UAAQ,IAEZ,wBAAQxE,UAAU,YAAYgD,KAAK,SAAnC,kC,4HC5Ib+D,IAhDf,WACI,IAAMpH,EAAOC,YAAYC,KADT,EAEUO,qBAFV,mBAETC,EAFS,KAEFC,EAFE,KAGVC,EAAqBC,IAAWC,WAAWd,EAAKY,UAEhDG,EAAmB,CAErBC,IAAKC,8BACLC,OAAQD,4CAKNE,EAAQ,uCAAG,WAAOH,EAAcJ,GAArB,uBAAAQ,EAAA,sEACQC,IAAOC,YAAYN,GAD3B,cACPO,EADO,gBAECA,EAAOC,SAASZ,GAFjB,qBAGPa,EAAQ,IAAIC,IAAM,QAAQC,GAAG3B,EAAKY,UAH3B,SAISW,EAAOK,cAJhB,cAIPC,EAJO,OAKPC,EAAeC,IAASjB,WAAWe,EAAQ,GAAGG,GAAGC,YAL1C,UAMeV,EAAOW,KAAKJ,EAAc,OAAQL,GANjD,QAMPU,EANO,OAQbxB,EAASwB,EAAcC,KAAI,SAAAC,GAAI,MAAK,CAAEA,KAAMA,EAAKA,KAAMC,KAAMD,EAAKE,YAAaC,KAAMH,EAAKG,KAAMC,MAAOJ,EAAKI,MAAOC,KAAML,EAAKK,KAAMV,GAAIK,EAAKM,SARhI,4CAAH,wDAiBd,OAJAC,qBAAU,WACNzB,EAASJ,EAASH,KACnB,CAACG,IAGA,qBAAKV,UAAU,WAAf,SACI,qBAAKA,UAAU,QAAf,gBAEKK,QAFL,IAEKA,OAFL,EAEKA,EAAO0B,KAAI,SAAAC,GAAI,OAAI,cAAC,IAAD,CAChBQ,SAAUR,EAAKA,KACfS,SAAUT,EAAKK,KAAKK,OAAO,EAAG,IAAM,MACpCP,KAAMH,EAAKG,KACXF,KAAMD,EAAKC,KAAKS,OAAO,EAAG,IAAM,MAChCf,GAAIK,EAAKL,GAETS,MAAOJ,EAAKI,OADPJ,EAAKL,a,iCCpD9B,2CA8BeqF,IAxBf,WAiBI,OAbapH,YAAYC,KAERoH,cAGjB1E,qBAAU,WAGN,OAAO,eAGR,IAGC,qBAAKvC,UAAU,c,2HCxBR,G,OAAA,IAA0B,sC,uBCgB5BkH,EAAb,6HAFI,WAAmBL,GAAe,yBAAfA,QAAc,KADzBM,WACyB,KAuHtBC,IAnHf,WAEI,IAAMC,EAAWJ,cAuCXK,EAAS,uCAAG,8BAAAvG,EAAA,yDACRwG,OAAsCC,SAD9B,sBAEJ,IAAIC,MACN,8FAHM,cAOd3H,QAAQ4H,MAAM,iCAERC,EAAW,IAAIC,IAAUC,aAAcN,OAAsCC,UAC7EM,EAASH,EAASL,YAVV,kBAWPQ,GAXO,2CAAH,qDAcTC,EAAmB,uCAAG,gCAAAhH,EAAA,sEACHuG,IADG,cAClBQ,EADkB,gBAGAP,OAAsCC,SAASQ,QAAQ,CAAEC,OAAQ,wBAHjE,UAIA,KADlBC,EAHkB,QAIXpD,OAJW,sBAKd,IAAI2C,MAAM,0EALI,cAQlBU,EAAU,IAAIjB,EAAgBgB,EAAS,IARrB,kBAUjB,CAAEC,UAASL,WAVM,4CAAH,qDAYnBM,EAAkB,uCAAG,sCAAArH,EAAA,sEACAgH,IADA,cACjBM,EADiB,OA/DQC,EAkEWD,EAASF,QAlEeI,EAkEN,QAAtDC,EAhEF,mgBASAF,EAAiBzB,MATjB,0IAgBA0B,EAhBA,2gBA6DmB,SAIEF,EAASP,OAAOW,YAAYD,GAJ9B,UAIjBE,EAJiB,OAMV,QADPC,EAAOC,IAAMC,UAAUH,IALN,uBAOb,IAAIjB,MAAM,0EAPG,WAkBF,MAPfqB,EAAQH,EAETI,QAAQ,KAAM,IAEdC,MAAM,SACNjH,KAAI,SAACkH,GAAD,OAAiBC,IAAUC,KAAK,KAAOF,GAAaG,eAEnDtE,OAlBa,uBAmBb,IAAI2C,MAAM,oEAnBG,eAqBjBlH,EAAWC,IAAW6I,mBAAmBC,WAAWH,KAAKL,IAC/DhJ,QAAQ+E,IAAItE,EAASqB,YAGrB9B,QAAQ+E,IAAItE,GAEZ8G,EAASkC,YAAM,CACXhJ,SAAUA,EAASqB,cA5BA,kBA+BhBrB,GA/BgB,kCA/DO,IAAC+H,EAAmCC,IA+D3C,OAAH,qDAmCxB,OACI,qBAAKvI,UAAU,QAAf,SAEI,sBAAKA,UAAU,YAAf,UACI,qBAAK+C,IAAKyG,EAAKC,IAAI,KACnB,qBAAKzJ,UAAU,cAAf,SACI,cAAC0J,EAAA,EAAD,CAAQlD,QAAS4B,EAAjB,0C,yDC9HL,MAA0B,kC,yCCoC1BuB,IA3Bf,WAEI,IAAMhK,EAAOC,YAAYC,KAEnBwH,EAAWJ,cAEjB,OACI,sBAAKjH,UAAU,SAAf,UACI,qBAAKA,UAAU,eAAf,SAEI,cAAC,IAAD,CAASA,UAAU,kBAAkB4J,gBAAgB,iBAAiBC,GAAG,UAAzE,SAAmF,qBAAK9G,IAAK+G,EAAOC,MAAM,OAAON,IAAI,SAEzH,sBAAKzJ,UAAU,iBAAf,UACI,cAAC,IAAD,CAASA,UAAU,kBAAkB4J,gBAAgB,iBAAiBC,GAAG,UAAzE,oBACA,cAAC,IAAD,CAAS7J,UAAU,kBAAkB4J,gBAAgB,iBAAiBC,GAAG,QAAzE,kBACA,cAAC,IAAD,CAAS7J,UAAU,kBAAkB4J,gBAAgB,iBAAiBC,GAAG,UAAzE,oBACA,cAAC,IAAD,CAAS7J,UAAU,kBAAkB4J,gBAAgB,iBAAiBC,GAAG,UAAzE,oBACA,cAAC,IAAD,CAAS7J,UAAU,kBAAkB4J,gBAAgB,iBAAiBC,GAAG,UAAzE,uBAEJ,sBAAK7J,UAAU,gBAAf,UACI,cAAC0J,EAAA,EAAD,CAAQlD,QAAS,kBAAMa,EAAS2C,gBAAhC,oBACA,cAAC,IAAD,CAASH,GAAG,WAAZ,SAAuB,cAACI,EAAA,EAAD,CAAQlH,IAAKpD,EAAKuK,SAAUC,MAAO,mB,gRC9B1E,mHAMMC,EAAYC,YAAY,CAC1BhI,KAAM,OACNiI,aANiB,CACjB3K,KAAM,MAMN4K,SAAU,CACNhB,MAAO,SAACiB,EAAOC,GACXD,EAAM7K,KAAO8K,EAAOC,SAExBV,OAAQ,SAACQ,GACLA,EAAM7K,KAAO,SAKZE,EAAa,SAAC2K,GAAD,OAAWA,EAAM7K,KAAKA,M,EAEfyK,EAAUO,QAA5BpB,E,EAAAA,MAAOS,E,EAAAA,OAEPI,MAAf,S,4OCpBeQ,cAAe,CAC5BC,QAAS,CACPlL,KAAMmL,O,QCOUC,QACW,cAA7BxD,OAAOyD,SAASC,UAEe,UAA7B1D,OAAOyD,SAASC,UAEhB1D,OAAOyD,SAASC,SAASjC,MACvB,2D,WCVNkC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUC,MAAOA,EAAjB,SACE,cAAC3L,EAAA,EAAD,QAGJgH,SAASC,eAAe,SDqHpB,kBAAmB2E,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB,gCErInB,uBAuCeC,IApCf,YAA8D,IAA9CjK,EAA6C,EAA7CA,GAAIa,EAAyC,EAAzCA,SAAUC,EAA+B,EAA/BA,SAAUN,EAAqB,EAArBA,KAAMF,EAAe,EAAfA,KAAMG,EAAS,EAATA,MAChD,MAAc,UAAVA,EAGI,sBAAcpC,UAAU,OAAxB,UACI,qBAAKA,UAAU,oBAAf,SACe,UAAVoC,EAAoB,qBAEjBW,IAAK,+BAAiCP,EACtCiH,IAAI,IAFC9H,GAGO,UAAVS,EAAoB,uBACtBU,QAAQ,OAAOD,UAAQ,EADD,SAGtB,wBAAQE,IAAK,8BAAgCP,KADxCb,GAEa,aAAVS,EAAuB,uBAE/BW,IAAK,8BAAgCP,EACrCuH,MAAM,QACN8B,OAAO,SAHFlK,GAIJ,OAGT,sBAAK3B,UAAU,UAAf,UACI,sBAAKA,UAAU,SAAf,UAAwB,6BAAKyC,IAAc,sBAAMzC,UAAU,OAAhB,SAAwBmC,OAEnE,sBAAKnC,UAAU,cAAf,UAEI,4BAAIiC,IAFR,IAEkB,mBAAGiE,OAAO,SAASjD,KAAI,sCAAiCT,GAAxD,0BAvBhBb,GA6BX,Q","file":"static/js/main.2d3577ef.chunk.js","sourcesContent":["import React from 'react';\r\nimport './App.css';\r\nimport { selectUser } from './features/userSlice';\r\nimport Login from './Login';\r\nimport { useSelector } from \"react-redux\";\r\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\r\nimport Photos from \"./components/Photos\";\r\nimport Docs from \"./components/Docs\";\r\nimport Audios from \"./components/Audios\";\r\nimport Videos from \"./components/Videos\";\r\nimport Navbar from \"./components/Navbar\";\r\nimport Upload from \"./components/Upload\";\r\nimport Homepage from './components/Homepage';\r\nimport Profile from './components/Profile';\r\n(global).WebSocket = require('isomorphic-ws')\r\n\r\nfunction App() {\r\n\r\n  const user = useSelector(selectUser);\r\n\r\n  console.table(user);\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      <Router>\r\n        {!user ? (\r\n          <Login />) : (\r\n          <>\r\n            <Navbar />\r\n            <Switch>\r\n              <Route exact path=\"/photos\" >\r\n                <Photos />\r\n              </Route>\r\n              <Route exact path=\"/docs\" >\r\n                <Docs />\r\n              </Route>\r\n              <Route exact path=\"/audios\" >\r\n                <Audios />\r\n              </Route>\r\n              <Route exact path=\"/videos\" >\r\n                <Videos />\r\n              </Route>\r\n              < Route exact path=\"/upload\" >\r\n                <Upload />\r\n              </Route>\r\n              <Route exact path=\"/profile\" >\r\n                <Profile />\r\n              </Route>\r\n              <Route path=\"/\" >\r\n                <Homepage />\r\n              </Route>\r\n            </Switch>\r\n          </>\r\n        )\r\n        }\r\n      </Router>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App;\r\n","import { PrivateKey } from '@textile/crypto';\r\nimport { Client, Where } from '@textile/hub-threads-client';\r\nimport ThreadID from '@textile/threads-id';\r\nimport React, { useEffect, useState } from 'react'\r\nimport { useSelector } from 'react-redux';\r\nimport { selectUser } from '../features/userSlice';\r\nimport Card from './Card';\r\nimport \"./Photos.css\";\r\n\r\nfunction Photos() {\r\n    const user = useSelector(selectUser);\r\n    const [files, setFiles] = useState();\r\n    const identity = PrivateKey.fromString(user.identity);\r\n\r\n    const keyinfo = {\r\n        key: process.env.REACT_APP_KEY,\r\n        secret: process.env.REACT_APP_SECRET\r\n    };\r\n\r\n    let token = null;\r\n\r\n    const getFiles = async (key, identity) => {\r\n        const client = await Client.withKeyInfo(key)\r\n        token = await client.getToken(identity)\r\n        const query = new Where('ftype').eq('image');\r\n        const threads = await client.listThreads();\r\n        const datathreadId = ThreadID.fromString(threads[0].id.toString());\r\n        const recievedFiles = await client.find(datathreadId, 'data', query);\r\n        // @ts-ignore\r\n        setFiles(recievedFiles.map(file => ({ file: file.file, desc: file.description, date: file.date, ftype: file.ftype, name: file.name, id: file._id })));\r\n    }\r\n\r\n    useEffect(() => {\r\n        getFiles(keyinfo, identity)\r\n    }, [keyinfo])\r\n\r\n    return (\r\n        <div className=\"docs\">\r\n            <div className=\"cards\">\r\n                {/* @ts-ignore */}\r\n                {files?.map(file => <Card\r\n                    filehash={file.file}\r\n                    filename={file.name.substr(0, 21) + '...'}\r\n                    date={file.date}\r\n                    desc={file.desc.substr(0, 28) + '...'}\r\n                    id={file.id}\r\n                    key={file.id}\r\n                    ftype={file.ftype}\r\n                />)}\r\n            </div>\r\n        </div >\r\n    )\r\n}\r\n\r\nexport default Photos\r\n","import { PrivateKey } from '@textile/crypto';\r\nimport { Client, Where } from '@textile/hub-threads-client';\r\nimport ThreadID from '@textile/threads-id';\r\nimport React, { useEffect, useState } from 'react'\r\nimport { useSelector } from 'react-redux';\r\nimport { selectUser } from '../features/userSlice';\r\nimport Card from './Card';\r\nimport \"./Docs.css\";\r\n\r\nfunction Docs() {\r\n\r\n    const user = useSelector(selectUser);\r\n    const [files, setFiles] = useState();\r\n    const identity = PrivateKey.fromString(user.identity);\r\n\r\n    const keyinfo = {\r\n        key: process.env.REACT_APP_KEY,\r\n        secret: process.env.REACT_APP_SECRET\r\n    };\r\n\r\n    let token = null;\r\n\r\n    const getFiles = async (key, identity) => {\r\n        const client = await Client.withKeyInfo(key)\r\n        token = await client.getToken(identity)\r\n        const query = new Where('ftype').eq('document');\r\n        const threads = await client.listThreads();\r\n        const datathreadId = ThreadID.fromString(threads[0].id.toString());\r\n        const recievedFiles = await client.find(datathreadId, 'data', query);\r\n        // @ts-ignore\r\n        setFiles(recievedFiles.map(file => ({ file: file.file, desc: file.description, date: file.date, ftype: file.ftype, name: file.name, id: file._id })));\r\n    }\r\n\r\n    useEffect(() => {\r\n        getFiles(keyinfo, identity)\r\n    }, [keyinfo])\r\n\r\n    return (\r\n        <div className=\"docs\">\r\n            <div className=\"cards\">\r\n                {/* @ts-ignore */}\r\n                {files?.map(file => <Card\r\n                    filehash={file.file}\r\n                    filename={file.name.substr(0, 21) + '...'}\r\n                    date={file.date}\r\n                    desc={file.desc.substr(0, 28) + '...'}\r\n                    id={file.id}\r\n                    key={file.id}\r\n                    ftype={file.ftype}\r\n                />)}\r\n            </div>\r\n        </div >\r\n    )\r\n}\r\n\r\nexport default Docs;\r\n","import { PrivateKey } from '@textile/crypto';\r\nimport { Client, Where } from '@textile/hub-threads-client';\r\nimport ThreadID from '@textile/threads-id';\r\nimport React, { useEffect, useState } from 'react'\r\nimport { useSelector } from 'react-redux';\r\nimport { selectUser } from '../features/userSlice';\r\nimport \"./Audios.css\";\r\n\r\nfunction Audios() {\r\n\r\n    const user = useSelector(selectUser);\r\n\r\n    const [files, setFiles] = useState([]);\r\n\r\n    const identity = PrivateKey.fromString(user.identity);\r\n\r\n    const keyinfo = {\r\n        key: process.env.REACT_APP_KEY,\r\n        secret: process.env.REACT_APP_SECRET\r\n    };\r\n\r\n    let token = null;\r\n\r\n    const getFiles = async (key, identity) => {\r\n        const client = await Client.withKeyInfo(key)\r\n        token = await client.getToken(identity)\r\n        const query = new Where('ftype').eq('audio');\r\n        const threads = await client.listThreads();\r\n        const datathreadId = ThreadID.fromString(threads[0].id.toString());\r\n        const recievedFiles = await client.find(datathreadId, 'data', query);\r\n        // @ts-ignore\r\n        setFiles(recievedFiles.map(file => ({ file: file.file, desc: file.description, date: file.date, ftype: file.ftype, name: file.name, id: file._id })));\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n        getFiles(keyinfo, identity)\r\n    }, [keyinfo])\r\n\r\n    return (\r\n        <div className=\"audios\">\r\n            {files.map(file => <div id={file.id} className=\"audiofile\">\r\n                <audio controls preload=\"true\" ><source src={`https://ipfs.infura.io/ipfs/${file.file}`} type=\"\" /></audio><div className=\"audio__info\">\r\n                    <div className=\"audio__meta\"><h4>{file.name.substr(0, 20)}</h4><span>{file.date}</span></div>\r\n\r\n                    <div className=\"audio__footer\">\r\n                        <p>{file.desc.substr(0, 29) + '...'}</p> <a href={`https://ipfs.infura.io/ipfs/${file.file}`}>View</a>\r\n                    </div>\r\n                </div></div>)}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Audios;\r\n","import { PrivateKey } from '@textile/crypto';\r\nimport { Client, Where } from '@textile/hub-threads-client';\r\nimport ThreadID from '@textile/threads-id';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { selectUser } from '../features/userSlice';\r\nimport Card from './Card';\r\nimport \"./Videos.css\";\r\n\r\nfunction Videos() {\r\n    const user = useSelector(selectUser);\r\n    const [files, setFiles] = useState();\r\n    const identity = PrivateKey.fromString(user.identity);\r\n\r\n    const keyinfo = {\r\n        key: process.env.REACT_APP_KEY,\r\n        secret: process.env.REACT_APP_SECRET\r\n    };\r\n\r\n    let token = null;\r\n\r\n    const getFiles = async (key, identity) => {\r\n        const client = await Client.withKeyInfo(key)\r\n        token = await client.getToken(identity)\r\n        const query = new Where('ftype').eq('video');\r\n        const threads = await client.listThreads();\r\n        const datathreadId = ThreadID.fromString(threads[0].id.toString());\r\n        const recievedFiles = await client.find(datathreadId, 'data', query);\r\n        // @ts-ignore\r\n        setFiles(recievedFiles.map(file => ({ file: file.file, desc: file.description, date: file.date, ftype: file.ftype, name: file.name, id: file._id })));\r\n    }\r\n\r\n    useEffect(() => {\r\n        getFiles(keyinfo, identity)\r\n    }, [keyinfo])\r\n\r\n    return (\r\n        <div className=\"videos\">\r\n            <div className=\"cards\">\r\n                {/* @ts-ignore */}\r\n                {files?.map(file => <Card\r\n                    filehash={file.file}\r\n                    filename={file.name.substr(0, 21) + '...'}\r\n                    date={file.date}\r\n                    desc={file.desc.substr(0, 28) + '...'}\r\n                    id={file.id}\r\n                    key={file.id}\r\n                    ftype={file.ftype}\r\n                />)}\r\n            </div>\r\n        </div >\r\n    )\r\n}\r\n\r\nexport default Videos;","import { useState } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { selectUser } from '../features/userSlice';\r\nimport { useHistory } from 'react-router-dom';\r\nimport \"./Upload.css\";\r\nimport { IconButton } from '@material-ui/core';\r\nimport PublishIcon from '@material-ui/icons/Publish';\r\nimport { Client, createUserAuth, Identity, KeyInfo, PrivateKey, ThreadID } from '@textile/hub';\r\nconst React = require('react');\r\nconst CreateIPFSClient = require('ipfs-http-client');\r\n\r\n\r\n\r\nconst ipfsClient = CreateIPFSClient({ host: 'ipfs.infura.io', port: 5001, protocol: 'https' });\r\n\r\n\r\nfunction Upload() {\r\n\r\n    const [ext, setExt] = useState(\"\");\r\n    const [process, setProcess] = useState(\"\");\r\n    const [exist, setExist] = useState([]);\r\n    const [name, setName] = useState(\"\");\r\n    const [desc, setDesc] = useState(\"\");\r\n    const [date, setDate] = useState(\"\");\r\n    let ftype = null;\r\n\r\n    const [added_file_hash, setFileHash] = useState(null);\r\n\r\n    const user = useSelector(selectUser);\r\n\r\n    const identity = PrivateKey.fromString(user.identity);\r\n\r\n    const history = useHistory();\r\n\r\n    const keyinfo = {\r\n        key: process.env.REACT_APP_KEY,\r\n        secret: process.env.REACT_APP_SECRET\r\n    };\r\n\r\n    const dataschema = {\r\n        title: \"Drive Data\",\r\n        type: \"object\",\r\n        required: [\"_id\"],\r\n        properties: {\r\n            _id: {\r\n                type: \"string\",\r\n                description: \"The instance's id.\",\r\n            },\r\n            user: {\r\n                type: \"string\",\r\n                description: \"The user's identity\",\r\n            },\r\n            file: {\r\n                description: \"The hashed value of file\",\r\n                type: \"string\",\r\n            },\r\n            ftype: {\r\n                description: \"The type of file being uploaded\",\r\n                type: \"string\",\r\n            },\r\n            name: {\r\n                description: \"The name of the file uploaded\",\r\n                type: \"string\",\r\n            },\r\n            description: {\r\n                description: \"The description of the file\",\r\n                type: \"string\",\r\n            },\r\n            date: {\r\n                description: \"The date of the file\",\r\n                type: \"string\"\r\n            }\r\n        },\r\n    }\r\n\r\n    async function push(schema, key, identity) {\r\n        const client = await Client.withKeyInfo(key)\r\n        const token = await client.getToken(identity)\r\n        console.log(client);\r\n        console.log(token);\r\n\r\n        const file = {\r\n            user: user.identity,\r\n            file: added_file_hash,\r\n            ftype: ftype,\r\n            name: name,\r\n            description: desc,\r\n            date: date,\r\n            id: ''\r\n        }\r\n\r\n        let threads = await client.listThreads();\r\n        if (threads.length === 0) {\r\n            /**\r\n             * Setup a new ThreadID and Database\r\n             */\r\n            const threadId = ThreadID.fromRandom()\r\n            console.log(\"New threadId\", threadId, \" \", typeof (threadId));\r\n\r\n            /**\r\n             * Each new ThreadID requires a `newDB` call.\r\n             */\r\n            console.log(client);\r\n\r\n            await client.newDB(threadId, \"data\");\r\n            console.log(\"new thread created\");\r\n            /**\r\n             * We add our first Collection to the DB for any schema.\r\n             */\r\n\r\n            await client.newCollection(threadId, { name: 'data', schema: schema });\r\n        }\r\n\r\n\r\n        threads = await client.listThreads();\r\n        /* await client.deleteDB(ThreadID.fromString(threads[0].id.toString()));\r\n        console.log(\"Test db deleted\"); */\r\n        console.log(\"Threads: \", threads);\r\n        console.log(threads[0].id);\r\n        const datathreadId = ThreadID.fromString(threads[0].id.toString());\r\n        console.log(\"Threads: \", threads);\r\n\r\n\r\n        await client.create(datathreadId, 'data', [file]);\r\n        console.log(\"Data Added Successfully\");\r\n\r\n    }\r\n\r\n    const captureFile = function (event) {\r\n        setProcess(\"Wait till we process the file\");\r\n        event.stopPropagation()\r\n        event.preventDefault();\r\n        saveToIpfs(event.target.files);\r\n        const extension = String(event.target.files[0].name.split('.').pop()).toLowerCase();\r\n        setExt(extension);\r\n    }\r\n\r\n    const saveToIpfs = async function ([file]) {\r\n        try {\r\n            const added = await ipfsClient.add(file)\r\n            setFileHash(added.cid.toString())\r\n        } catch (err) {\r\n            console.error(err)\r\n        }\r\n        setProcess(\"\");\r\n    }\r\n\r\n    const fileExists = async () => {\r\n\r\n    }\r\n\r\n    const pushFiles = async () => {\r\n\r\n        await push(dataschema, keyinfo, identity);\r\n    }\r\n\r\n    const handleSubmit = function (event) {\r\n        event.preventDefault();\r\n        console.log(ext);\r\n        if (ext === 'jpg' || ext === 'png' || ext === 'jpeg' || ext === 'gif') ftype = \"image\";\r\n        else if (ext === 'mp4' || ext === 'mov' || ext === 'wmv') ftype = \"video\";\r\n        else if (ext === 'doc' || ext === 'pdf' || ext === 'docx') ftype = \"document\";\r\n        else if (ext === 'mp3' || ext === 'wav') ftype = \"audio\";\r\n\r\n        if (added_file_hash && name && desc && date) {\r\n\r\n\r\n            console.log(added_file_hash);\r\n\r\n            pushFiles();\r\n\r\n            history.push(\"/\");\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n    if (ipfsClient) {\r\n        return (\r\n            <div className=\"upload\" >\r\n                <div className=\"upload__form\" >\r\n                    <form id='capture-media' onSubmit={handleSubmit} className=\"ui form\" >\r\n                        <div className=\"upload__formLeft\" style={{ backgroundImage: added_file_hash ? `url(https://ipfs.infura.io/ipfs/${added_file_hash})` : \"none\", }\r\n                        }>\r\n                            <input className=\"input\" type='file' accept='jpg, jpeg, png, pdf, mp3, mp4' name='input-file' id='input-file' onChange={captureFile} required />\r\n                            <IconButton id=\"icon-button\" onClick={(e) => document.getElementById('input-file').click()\r\n                            }> <PublishIcon /></IconButton >\r\n                            <h4>{added_file_hash ? \"File Processed Successfully\" : process} </h4>\r\n                        </div>\r\n                        < div className=\"upload__formRight\" >\r\n\r\n                            <input className=\"input\" value={name} placeholder=\"Name of your file\" onChange={(e) => setName(e.target.value)} type='text' name='name' id='file-name' required />\r\n                            <input className=\"input\" value={desc} placeholder=\"A description of your file\" onChange={(e) => setDesc(e.target.value)} type='text' name='desc' id='description' required />\r\n                            <input\r\n                                className=\"ui input\"\r\n                                type=\"date\"\r\n                                onChange={(e) => setDate(e.target.value)}\r\n                                required\r\n                            />\r\n                            <button className=\"ui button\" type=\"submit\" > Upload </button>\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n\r\n        )\r\n\r\n    }\r\n}\r\n\r\nexport default Upload;\r\n","import React from \"react\";\r\nimport { useEffect } from \"react\";\r\nimport { useState } from \"react\";\r\n// @ts-ignore\r\nimport { useSelector } from \"react-redux\";\r\nimport { selectUser } from \"../features/userSlice\";\r\nimport \"./Homepage.css\";\r\nimport { Client, createUserAuth, Identity, KeyInfo, PrivateKey, ThreadID, Where } from '@textile/hub';\r\nimport { Buckets, UserAuth } from '@textile/hub'\r\nimport Card from \"./Card\";\r\n\r\n\r\nfunction Homepage() {\r\n    const user = useSelector(selectUser);\r\n    const [files, setFiles] = useState();\r\n    const identity: Identity = PrivateKey.fromString(user.identity);\r\n\r\n    const keyinfo: KeyInfo = {\r\n        // @ts-ignore\r\n        key: process.env.REACT_APP_KEY,\r\n        secret: process.env.REACT_APP_SECRET\r\n    };\r\n\r\n    let token = null;\r\n\r\n    const getFiles = async (key: KeyInfo, identity: Identity) => {\r\n        const client = await Client.withKeyInfo(key)\r\n        token = await client.getToken(identity)\r\n        const query = new Where('user').eq(user.identity);\r\n        const threads = await client.listThreads();\r\n        const datathreadId = ThreadID.fromString(threads[0].id.toString());\r\n        const recievedFiles = await client.find(datathreadId, 'data', query);\r\n        // @ts-ignore\r\n        setFiles(recievedFiles.map(file => ({ file: file.file, desc: file.description, date: file.date, ftype: file.ftype, name: file.name, id: file._id })));\r\n    }\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        getFiles(keyinfo, identity)\r\n    }, [keyinfo])\r\n\r\n    return (\r\n        <div className=\"homepage\">\r\n            <div className=\"cards\">\r\n                {/* @ts-ignore */}\r\n                {files?.map(file => <Card\r\n                    filehash={file.file}\r\n                    filename={file.name.substr(0, 21) + '...'}\r\n                    date={file.date}\r\n                    desc={file.desc.substr(0, 28) + '...'}\r\n                    id={file.id}\r\n                    key={file.id}\r\n                    ftype={file.ftype}\r\n                />)}\r\n            </div>\r\n        </div >\r\n    )\r\n}\r\n\r\nexport default Homepage;\r\n","import { Avatar, Button } from '@material-ui/core';\r\nimport React, { useEffect, useState } from 'react'\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { logout, selectUser } from '../features/userSlice';\r\nimport \"./Profile.css\";\r\n\r\nfunction Profile() {\r\n\r\n\r\n\r\n    const user = useSelector(selectUser);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n\r\n    useEffect(() => {\r\n\r\n\r\n        return () => {\r\n\r\n        }\r\n    }, []);\r\n\r\n    return (\r\n        <div className=\"profile\">\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile\r\n","export default __webpack_public_path__ + \"static/media/metamask.b818f2bb.png\";","import React, { useState } from 'react';\r\nimport { PrivateKey } from '@textile/hub';\r\nimport { BigNumber, providers, utils } from 'ethers';\r\nimport { Button } from '@material-ui/core';\r\nimport \"./Login.css\";\r\nimport fox from \"./images/metamask.png\";\r\n// @ts-ignore\r\nimport { useDispatch } from 'react-redux';\r\nimport { login } from './features/userSlice';\r\n\r\ntype WindowInstanceWithEthereum = Window & typeof globalThis & { ethereum?: providers.ExternalProvider };\r\nclass StrongType<Definition, Type> {\r\n    // @ts-ignore\r\n    private _type: Definition;\r\n    constructor(public value?: Type) { }\r\n}\r\nexport class EthereumAddress extends StrongType<'ethereum_address', string> { }\r\n\r\nfunction Login() {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const generateMessageForEntropy = (ethereum_address: EthereumAddress, application_name: string): string => {\r\n        return (\r\n            '******************************************************************************** \\n' +\r\n            'READ THIS MESSAGE CAREFULLY. \\n' +\r\n            'DO NOT SHARE THIS SIGNED MESSAGE WITH ANYONE OR THEY WILL HAVE READ AND WRITE \\n' +\r\n            'ACCESS TO THIS APPLICATION. \\n' +\r\n            'DO NOT SIGN THIS MESSAGE IF THE FOLLOWING IS NOT TRUE OR YOU DO NOT CONSENT \\n' +\r\n            'TO THE CURRENT APPLICATION HAVING ACCESS TO THE FOLLOWING APPLICATION. \\n' +\r\n            '******************************************************************************** \\n' +\r\n            'The Ethereum address used by this application is: \\n' +\r\n            '\\n' +\r\n            ethereum_address.value +\r\n            '\\n' +\r\n            '\\n' +\r\n            '\\n' +\r\n            'By signing this message, you authorize the current application to use the \\n' +\r\n            'following app associated with the above address: \\n' +\r\n            '\\n' +\r\n            application_name +\r\n            '\\n' +\r\n            '\\n' +\r\n            '\\n' +\r\n            'The hash of your non-recoverable, private, non-persisted password or secret \\n' +\r\n            'phrase is: \\n' +\r\n            '\\n' +\r\n            '\\n' +\r\n            '\\n' +\r\n            '\\n' +\r\n            '******************************************************************************** \\n' +\r\n            'ONLY SIGN THIS MESSAGE IF YOU CONSENT TO THE CURRENT PAGE ACCESSING THE KEYS \\n' +\r\n            'ASSOCIATED WITH THE ABOVE ADDRESS AND APPLICATION. \\n' +\r\n            'AGAIN, DO NOT SHARE THIS SIGNED MESSAGE WITH ANYONE OR THEY WILL HAVE READ AND \\n' +\r\n            'WRITE ACCESS TO THIS APPLICATION. \\n' +\r\n            '******************************************************************************** \\n'\r\n        );\r\n    }\r\n\r\n    const getSigner = async () => {\r\n        if (!(window as WindowInstanceWithEthereum).ethereum) {\r\n            throw new Error(\r\n                'Ethereum is not connected. Please download Metamask from https://metamask.io/download.html'\r\n            );\r\n        }\r\n\r\n        console.debug('Initializing web3 provider...');\r\n        // @ts-ignore\r\n        const provider = new providers.Web3Provider((window as WindowInstanceWithEthereum).ethereum);\r\n        const signer = provider.getSigner();\r\n        return signer\r\n    }\r\n\r\n    const getAddressAndSigner = async (): Promise<{ address: EthereumAddress, signer: any }> => {\r\n        const signer = await getSigner()\r\n        // @ts-ignore\r\n        const accounts = await (window as WindowInstanceWithEthereum).ethereum.request({ method: 'eth_requestAccounts' });\r\n        if (accounts.length === 0) {\r\n            throw new Error('No account is provided. Please provide an account to this application.');\r\n        }\r\n\r\n        const address = new EthereumAddress(accounts[0]);\r\n\r\n        return { address, signer }\r\n    }\r\n    const generatePrivateKey = async (): Promise<PrivateKey> => {\r\n        const metamask = await getAddressAndSigner()\r\n        // avoid sending the raw secret by hashing it first\r\n        const message = generateMessageForEntropy(metamask.address, 'drive')\r\n        const signedText = await metamask.signer.signMessage(message);\r\n        const hash = utils.keccak256(signedText);\r\n        if (hash === null) {\r\n            throw new Error('No account is provided. Please provide an account to this application.');\r\n        }\r\n        // The following line converts the hash in hex to an array of 32 integers.\r\n        // @ts-ignore\r\n        const array = hash\r\n            // @ts-ignore\r\n            .replace('0x', '')\r\n            // @ts-ignore\r\n            .match(/.{2}/g)\r\n            .map((hexNoPrefix) => BigNumber.from('0x' + hexNoPrefix).toNumber())\r\n\r\n        if (array.length !== 32) {\r\n            throw new Error('Hash of signature is not the correct size! Something went wrong!');\r\n        }\r\n        const identity = PrivateKey.fromRawEd25519Seed(Uint8Array.from(array))\r\n        console.log(identity.toString())\r\n\r\n        // Your app can now use this identity for generating a user Mailbox, Threads, Buckets, etc\r\n        console.log(identity);\r\n\r\n        dispatch(login({\r\n            identity: identity.toString()\r\n        }))\r\n\r\n        return identity\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"login\">\r\n\r\n            <div className=\"container\">\r\n                <img src={fox} alt=\"\" />\r\n                <div className=\"login__form\">\r\n                    <Button onClick={generatePrivateKey}>Login with Metamask</Button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Login;\r\n","export default __webpack_public_path__ + \"static/media/earth.0be09407.png\";","import React from 'react';\r\nimport \"./Navbar.css\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport earth from \"../images/earth.png\";\r\nimport { logout, selectUser } from '../features/userSlice';\r\nimport { Button, Avatar } from '@material-ui/core/';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\n\r\nfunction Navbar() {\r\n\r\n    const user = useSelector(selectUser)\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    return (\r\n        <div className=\"navbar\">\r\n            <div className=\"navbar__left\">\r\n\r\n                <NavLink className=\"navbar__navlink\" activeClassName=\"navbar__active\" to=\"/photos\"><img src={earth} width=\"70px\" alt=\"\" /></NavLink>\r\n            </div>\r\n            <div className=\"navbar__center\">\r\n                <NavLink className=\"navbar__navlink\" activeClassName=\"navbar__active\" to=\"/photos\">Photos</NavLink>\r\n                <NavLink className=\"navbar__navlink\" activeClassName=\"navbar__active\" to=\"/docs\">Docs</NavLink>\r\n                <NavLink className=\"navbar__navlink\" activeClassName=\"navbar__active\" to=\"/audios\">Audios</NavLink>\r\n                <NavLink className=\"navbar__navlink\" activeClassName=\"navbar__active\" to=\"/videos\">Videos</NavLink>\r\n                <NavLink className=\"navbar__navlink\" activeClassName=\"navbar__active\" to=\"/upload\">Upload</NavLink>\r\n            </div>\r\n            <div className=\"navbar__right\">\r\n                <Button onClick={() => dispatch(logout())}>Logout</Button>\r\n                <NavLink to=\"/profile\"><Avatar src={user.photoUrl} sizes={\"17px\"} /></NavLink>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Navbar;\r\n","import { createSlice } from '@reduxjs/toolkit'\r\n\r\nconst initialState = {\r\n    user: null\r\n}\r\n\r\nconst userSlice = createSlice({\r\n    name: 'user',\r\n    initialState,\r\n    reducers: {\r\n        login: (state, action) => {\r\n            state.user = action.payload;\r\n        },\r\n        logout: (state) => {\r\n            state.user = null;\r\n        }\r\n    }\r\n});\r\n\r\nexport const selectUser = (state) => state.user.user;\r\n\r\nexport const { login, logout } = userSlice.actions\r\n\r\nexport default userSlice.reducer;","import { configureStore } from '@reduxjs/toolkit';\r\nimport userReducer from '../features/userSlice';\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    user: userReducer,\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","import React from 'react';\r\nimport \"./Card.css\";\r\n\r\nfunction Card({ id, filehash, filename, date, desc, ftype }) {\r\n    if (ftype !== 'audio') {\r\n        return (\r\n\r\n            <div key={id} className=\"card\">\r\n                <div className=\"card__mainContent\">\r\n                    {ftype === 'image' ? <img\r\n                        key={id}\r\n                        src={'https://ipfs.infura.io/ipfs/' + filehash}\r\n                        alt=\"\"\r\n                    /> : (ftype === 'video' ? <video\r\n                        preload=\"true\" controls\r\n                        key={id}>\r\n                        <source src={'http://ipfs.infura.io/ipfs/' + filehash} />\r\n                    </video> : (ftype === 'document' ? <embed\r\n                        key={id}\r\n                        src={\"http://ipfs.infura.io/ipfs/\" + filehash}\r\n                        width=\"100px\"\r\n                        height=\"200px\"\r\n                    /> : null))}\r\n\r\n                </div>\r\n                <div className=\"content\">\r\n                    <div className=\"header\"><h4>{filename}</h4><span className=\"meta\">{date}</span></div>\r\n\r\n                    <div className=\"description\">\r\n                        {/* @ts-ignore */}\r\n                        <p>{desc}</p> <a target='_blank' href={`https://ipfs.infura.io/ipfs/${filehash}`}>View</a>\r\n                    </div>\r\n                </div>\r\n            </div >\r\n        )\r\n    }\r\n    return null;\r\n}\r\n\r\nexport default Card\r\n"],"sourceRoot":""}